{
  "version": 3,
  "sources": ["../../../../node_modules/@telekom/scale-components/dist/esm/scale-sidebar-nav-item.entry.js"],
  "sourcesContent": ["import { r as registerInstance, h, a as Host, g as getElement } from './index-6d95a4bc.js';\nimport { c as classnames } from './index-713f92a5.js';\n\nconst sidebarNavItemCss = \":host{--border-bottom-color:var(--telekom-color-ui-faint);--border-left-color-third-nesting:var(--telekom-color-ui-strong);--color-active:var(--telekom-color-text-and-icon-primary-pressed);--color-hover:var(--telekom-color-text-and-icon-primary-hovered);--color-primary:var(--telekom-color-text-and-icon-primary-standard);--background-color-before-active:var(--color-primary);--font-bold:var(--telekom-text-style-ui-bold);--box-shadow-focus:inset 0 0 0 var(--telekom-line-weight-highlight)\\n    var(--telekom-color-functional-focus-standard)}.sidebar-nav-item{border-bottom-style:solid;border-bottom-width:1px;border-bottom-color:var(--border-bottom-color)}.sidebar-nav-item--active{position:relative;color:var(--color-primary)}.sidebar-nav-item--active::before{content:'';display:block;position:absolute;top:0;left:var(--left-current-border, 0);width:0;height:100%;background-color:var(--background-color-before-active);border-left:2px solid transparent}.sidebar-nav-item:hover.sidebar-nav-item--active::before{background-color:var(--color-hover)}.sidebar-nav-item:active.sidebar-nav-item--active::before{background-color:var(--color-active)}.sidebar-nav-item--condensed.sidebar-nav-item--active::before{left:-1px}:host([nesting-level='1']) .sidebar-nav-item,.sidebar-nav-item--bold{font:var(--font-bold)}:host([nesting-level='3']) .sidebar-nav-item{border-left-color:var(--border-left-color-third-nesting);border-left-style:solid;border-left-width:0.0625rem}::slotted(a){color:currentColor;display:flex;align-items:center;padding-top:1rem;padding-right:1rem;padding-bottom:1rem;padding-left:var(--spacing-indent);border-radius:var(--telekom-radius-small);text-decoration:none;outline:none;min-height:20px}:host([nesting-level='2']) ::slotted(a){padding-left:calc(var(--spacing-indent) + 0.75rem)}::slotted(a:hover){color:var(--color-hover)}::slotted(a:focus){box-shadow:var(--box-shadow-focus)}::slotted(a:active){color:var(--color-active)}.sidebar-nav-item--condensed{border-bottom-width:0}.sidebar-nav-item--condensed ::slotted(a){padding-top:0.5rem;padding-left:0.75rem;padding-right:0.5rem;padding-bottom:0.5rem}\";\n\nconst SR_ACTIVE_TEXT = ' Zurzeit aktiv';\nconst isActive = (current) => {\n  try {\n    return !!JSON.parse(current);\n  }\n  catch (e) {\n    if (typeof current === 'string') {\n      return true;\n    }\n    return !!current;\n  }\n};\nconst getScreenReaderText = (current) => {\n  let text;\n  try {\n    text = JSON.parse(current);\n  }\n  catch (e) {\n    text = current;\n  }\n  return typeof text === 'string' && text.length > 0\n    ? ` ${text}`\n    : SR_ACTIVE_TEXT;\n};\nconst SidebarNavItem = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n    /** Used normally for third level items, remove the bottom border */\n    this.condensed = false;\n    /** Bold text */\n    this.bold = false;\n    /** Text gets the active color */\n    this.active = false;\n    /**\n     * Mark the child link as \"current\" with `aria-current=page`.\n     * Provide the text hint if needed, default is: \"Zurzeit aktiv\"\n     */\n    this.current = null;\n  }\n  nestingLevelChanged(newValue) {\n    if (newValue === 1) {\n      this.bold = true;\n    }\n  }\n  currentChanged(newValue) {\n    this.handleAriaCurrentInSlottedA(newValue);\n    this.syncActiveToCurrent(newValue);\n  }\n  componentDidLoad() {\n    this.handleAriaCurrentInSlottedA(this.current);\n    if (this.current) {\n      this.syncActiveToCurrent(this.current);\n    }\n  }\n  /**\n   * If an item is `current`, it should be `active` as well\n   */\n  syncActiveToCurrent(newValue) {\n    this.active = isActive(newValue);\n  }\n  /**\n   * When `current` is set, this will:\n   * - set the aria-current=page attribute on the link\n   * - append a text-only hint for screen readers\n   * so we end up with something like this:\n   * <a href=\"...\" aria-current=\"page\">\n   *    Example<span style=\"...visible to SR only...\"> Active link</span>\n   * </a>\n   * @param current this.current\n   */\n  handleAriaCurrentInSlottedA(current) {\n    const a = this.el.querySelector('a');\n    if (this.srOnlyElement != null) {\n      a.removeChild(this.srOnlyElement);\n      this.srOnlyElement = null;\n    }\n    if (a != null) {\n      a.removeAttribute('aria-current');\n    }\n    if (isActive(current) && a != null) {\n      this.srOnlyElement = this.createScreenReaderOnlySpan();\n      a.appendChild(this.srOnlyElement);\n      a.setAttribute('aria-current', 'page');\n    }\n  }\n  createScreenReaderOnlySpan() {\n    const text = getScreenReaderText(this.current);\n    const span = document.createElement('span');\n    // .sr-only but inline\n    Object.assign(span.style, {\n      position: 'absolute',\n      left: '-10000px',\n      overflow: 'hidden',\n    });\n    span.textContent = text;\n    return span;\n  }\n  render() {\n    return (h(Host, null, this.styles && h(\"style\", null, this.styles), h(\"li\", { part: this.getBasePartMap(), class: this.getCssClassMap(), role: \"listitem\" }, h(\"slot\", null))));\n  }\n  getBasePartMap() {\n    return this.getCssOrBasePartMap('basePart');\n  }\n  getCssClassMap() {\n    return this.getCssOrBasePartMap('css');\n  }\n  getCssOrBasePartMap(mode) {\n    const component = 'sidebar-nav-item';\n    const prefix = mode === 'basePart' ? '' : `${component}--`;\n    return classnames(component, this.bold && `${prefix}bold`, this.condensed && `${prefix}condensed`, this.active && `${prefix}active`);\n  }\n  get el() { return getElement(this); }\n  static get watchers() { return {\n    \"nestingLevel\": [\"nestingLevelChanged\"],\n    \"current\": [\"currentChanged\"]\n  }; }\n};\nSidebarNavItem.style = sidebarNavItemCss;\n\nexport { SidebarNavItem as scale_sidebar_nav_item };\n"],
  "mappings": "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",
  "names": []
}
