{
  "version": 3,
  "sources": ["../../../../node_modules/@telekom/scale-components/dist/esm/scale-toggle-button.entry.js"],
  "sourcesContent": ["import { r as registerInstance, c as createEvent, h, a as Host, g as getElement } from './index-6d95a4bc.js';\nimport { c as classnames } from './index-713f92a5.js';\nimport { e as emitEvent } from './utils-c4af5b47.js';\nimport { s as statusNote } from './status-note-0089e9c9.js';\n\nconst toggleButtonCss = \":host{--width:auto;--spacing-x:var(--telekom-spacing-composition-space-08);--spacing-x-icon-only:var(--telekom-spacing-composition-space-04);--min-height:var(--telekom-spacing-composition-space-08);--height-xs:var(--telekom-spacing-composition-space-08);--height-small:var(--telekom-spacing-composition-space-10);--height-regular:var(--telekom-spacing-composition-space-12);--height-large:var(--telekom-spacing-composition-space-14);--radius:var(--telekom-radius-small);--transition:all var(--telekom-motion-duration-transition)\\n      var(--telekom-motion-easing-standard),\\n    border-radius var(--telekom-motion-duration-instant);--box-shadow-focus:inset 0 0 0 var(--telekom-line-weight-highlight)\\n    var(--telekom-color-functional-focus-standard);--font-weight:var(--telekom-typography-font-weight-bold);--font-size-large:var(--telekom-typography-font-size-body);--font-size-small:var(--telekom-typography-font-size-caption);--font-size-xs:var(--telekom-typography-font-size-small);--line-height:var(--telekom-spacing-composition-space-04);--spacing-icon-x:var(--telekom-spacing-composition-space-04);--vertical-align:middle;--border-color:var(--telekom-color-ui-border-standard);--border-color-disabled:var(--telekom-color-ui-border-disabled);--color-disabled:var(--telekom-color-text-and-icon-disabled);--font-size-small:var(--telekom-typography-font-size-small);--line-height-small:var(--telekom-typography-line-spacing-standard);--min-height-small:var(--telekom-spacing-composition-space-10);--radius-primary:var(--radius);--background-primary:var(--telekom-color-ui-subtle);--background-primary-disabled:var(--telekom-color-ui-disabled);--color-primary:var(--telekom-color-ui-extra-strong);--color-primary-hover:var(--telekom-color-primary-hovered);--color-primary-active:var(--telekom-color-primary-pressed);--background-secondary:transparent;--color-secondary:var(--telekom-color-text-and-icon-standard);--background-secondary-hover:var(--telekom-color-ui-state-fill-hovered);--background-secondary-active:var(--telekom-color-ui-state-fill-pressed);--background-secondary-disabled:none;--border-secondary:var(--telekom-color-ui-border-standard);--border-secondary-hover:var(--telekom-color-ui-border-hovered);--border-secondary-active:var(--telekom-color-ui-border-pressed);--border-secondary-focus:var(--telekom-color-functional-focus-standard);--color-selected:var(--telekom-color-text-and-icon-white-standard);--background-selected-light:var(--telekom-color-primary-standard);--background-selected-hover-light:var(--telekom-color-primary-hovered);--background-selected-active-light:var(--telekom-color-primary-pressed);--background-selected-dark:var(--telekom-color-ui-extra-strong);--background-selected-hover-dark:var(--telekom-color-ui-strong);--background-selected-active-dark:var(--telekom-color-ui-strong);--color-high-contrast:var(--telekom-color-text-and-icon-white-standard)}.toggle-button{box-sizing:border-box;display:inline-flex;align-items:center;position:relative;border:0;outline:none;cursor:pointer;user-select:none;font-family:inherit;word-spacing:inherit;letter-spacing:inherit;justify-content:center;text-decoration:none;font-weight:var(--font-weight);font-size:var(--font-size);line-height:var(--line-height);min-height:var(--min-height);width:var(--width);padding-left:var(--spacing-x);padding-right:var(--spacing-x);vertical-align:var(--vertical-align);transition:var(--transition);margin:0;color:var(--color-primary)}.toggle-button--primary{background:var(--background-primary)}.toggle-button--secondary{color:var(--color-secondary);background:var(--background-secondary)}.toggle-button--icon-before ::slotted(*){margin-right:var(--spacing-icon-x);pointer-events:none}.toggle-button--icon-after ::slotted(*){margin-left:var(--spacing-icon-x);pointer-events:none}.toggle-button--icon-only ::slotted(*){pointer-events:none}.toggle-button--xs{height:var(--height-xs);font-size:var(--font-size-xs)}.toggle-button--small{height:var(--height-small);font-size:var(--font-size-small)}.toggle-button--regular{height:var(--height-regular);font-size:var(--font-size-large)}.toggle-button--large{height:var(--height-large);font-size:var(--font-size-large)}.toggle-button:not(.button--disabled):focus{box-shadow:var(--box-shadow-focus)}.toggle-button:not(.button--disabled):hover{color:var(--color-secondary-hover);background-color:var(--background-secondary-hover)}.toggle-button:not(.button--disabled):active{color:var(--color-secondary-active);background-color:var(--background-secondary-active)}.toggle-button:disabled{color:var(--color-disabled);pointer-events:none;border:1px solid var(--border-color-disabled)}.toggle-button:disabled.toggle-button--primary{background:var(--background-primary-disabled)}.toggle-button--selected.toggle-button--color{color:var(--color-selected);background:var(--background-selected-light)}.toggle-button--selected:not(.button--disabled).toggle-button--color:hover{color:var(--color-selected);background:var(--background-selected-hover-light)}.toggle-button--selected:not(.button--disabled).toggle-button--color:active{color:var(--color-selected);background:var(--background-selected-active-light)}.toggle-button--selected.toggle-button--monochrome{color:var(--telekom-color-text-and-icon-inverted-standard);background:var(--background-selected-dark)}.toggle-button--selected:not(.button--disabled).toggle-button--monochrome:hover{color:var(--color-selected);background:var(--background-selected-hover-dark)}.toggle-button--selected:not(.button--disabled).toggle-button--monochrome:active{color:var(--color-selected);background:var(--background-selected-active-dark)}.toggle-button--border{border:1px solid var(--border-color)}.toggle-button--left,.toggle-button--left:disabled{border-right:0;border-radius:var(--radius-primary) 0 0 var(--radius-primary)}.toggle-button--right,.toggle-button--right:disabled{border-left:0;border-radius:0 var(--radius-primary) var(--radius-primary) 0}.toggle-button--both,.toggle-button--both:disabled{border-radius:var(--radius-primary)}.toggle-button--all,.toggle-button--all:disabled{border-radius:var(--radius-primary)}.toggle-button--neither,.toggle-button--neither:disabled{border-right:0;border-left:0;border-radius:0}@media screen and (forced-colors: active), (-ms-high-contrast: active){.toggle-button{color:var(--color-high-contrast)}}\";\n\nvar iconSizes;\n(function (iconSizes) {\n  iconSizes[\"xs\"] = \"12\";\n  iconSizes[\"small\"] = \"16\";\n  iconSizes[\"regular\"] = \"22\";\n  iconSizes[\"large\"] = \"24\";\n})(iconSizes || (iconSizes = {}));\nlet i = 0;\nconst ToggleButton = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n    this.scaleClick = createEvent(this, \"scale-click\", 7);\n    this.scaleClickLegacy = createEvent(this, \"scaleClick\", 7);\n    /** (optional) The size of the button */\n    this.size = 'regular';\n    /** (optional) Button background */\n    this.background = 'white';\n    /** @deprecated - variant should replace colorScheme */\n    this.colorScheme = 'color';\n    /** (optional) background variant of a selected toggle-button */\n    this.variant = 'color';\n    /** (optional) If `true`, the button is disabled */\n    this.disabled = false;\n    /** (optional) If `true`, the button is selected */\n    this.selected = false;\n    /** (optional) Button type */\n    this.iconOnly = false;\n    /** (optional) Icon position related to the label */\n    this.iconPosition = 'before';\n    /** (optional) set the border-radius left, right or both */\n    this.radius = null;\n    /** (optional) translation of 'selected */\n    this.ariaLangSelected = 'selected';\n    /** (optional) translation of 'deselected */\n    this.ariaLangDeselected = 'deselected';\n    /** a11y text for getting meaningful value. `$buttonNumber` and `$selected` are template variables and will be replaces by their corresponding properties.  */\n    this.ariaDescriptionTranslation = '$selected';\n    this.hasScaleIcon = false;\n    this.handleClick = (event) => {\n      event.preventDefault();\n      this.selected = !this.selected;\n      this.handleIconShape();\n      this.scaleClick.emit({ id: this.toggleButtonId, selected: this.selected });\n      emitEvent(this, 'scaleClick', {\n        id: this.toggleButtonId,\n        selected: this.selected,\n      });\n    };\n    this.handleIconShape = () => {\n      if (this.hasScaleIcon) {\n        Array.from(this.hostElement.children).forEach((node) => {\n          if (node.nodeName.substr(0, 10) === 'SCALE-ICON') {\n            if (this.selected) {\n              node.setAttribute('selected', 'true');\n            }\n            else {\n              node.removeAttribute('selected');\n            }\n          }\n        });\n      }\n    };\n  }\n  async setFocus() {\n    this.focusableElement.focus();\n  }\n  connectedCallback() {\n    this.setIconPositionProp();\n    this.handleIconShape();\n  }\n  componentDidLoad() {\n    this.handleIconSize();\n  }\n  componentDidRender() {\n    this.handleIconSize();\n    if (this.hostElement.hasAttribute('aria-label')) {\n      statusNote({\n        tag: 'deprecated',\n        message: 'Property \"ariaLabel\" is deprecated. Please use the \"ariaLabelToggleButton\" property!',\n        type: 'warn',\n        source: this.hostElement,\n      });\n    }\n  }\n  componentWillLoad() {\n    if (this.toggleButtonId == null) {\n      this.toggleButtonId = 'toggle-button-' + i++;\n    }\n  }\n  getAriaDescriptionTranslation() {\n    const replaceSelected = this.selected\n      ? this.ariaLangSelected\n      : this.ariaLangDeselected;\n    const filledText = this.ariaDescriptionTranslation\n      .replace(/\\$position/g, `${this.position}`)\n      .replace(/\\$selected/g, `${replaceSelected}`);\n    return filledText;\n  }\n  handleIconSize() {\n    Array.from(this.hostElement.children).forEach((child) => {\n      if (child.tagName.substr(0, 10) === 'SCALE-ICON') {\n        child.setAttribute('size', iconSizes[this.size]);\n      }\n    });\n  }\n  /**\n   * Detect whether a child node is a scale icon and contains text.\n   * If so, we set `iconPosition` to `after`, if the icon comes after the text.\n   */\n  setIconPositionProp() {\n    const nodes = Array.from(this.hostElement.childNodes).filter((node) => {\n      if (node.nodeName.substr(0, 10) === 'SCALE-ICON') {\n        this.hasScaleIcon = true;\n      }\n      // ignore empty text nodes, which are probably due to formatting\n      return !(node.nodeType === 3 && node.nodeValue.trim() === '');\n    });\n    if (!this.iconOnly &&\n      nodes &&\n      nodes.length &&\n      nodes[nodes.length - 1] &&\n      nodes[nodes.length - 1].nodeName.substr(0, 10) === 'SCALE-ICON') {\n      this.iconPosition = 'after';\n    }\n  }\n  render() {\n    return (h(Host, null, this.styles && h(\"style\", null, this.styles), h(\"button\", { ref: (el) => (this.focusableElement = el), class: this.getCssClassMap(), id: this.toggleButtonId, onClick: this.handleClick, disabled: this.disabled, type: \"button\", \"aria-label\": this.ariaLabelToggleButton, \"aria-pressed\": this.selected, part: this.getBasePartMap(), \"aria-description\": this.getAriaDescriptionTranslation() }, h(\"slot\", null))));\n  }\n  getBasePartMap() {\n    return this.getCssOrBasePartMap('basePart');\n  }\n  getCssClassMap() {\n    return this.getCssOrBasePartMap('css');\n  }\n  getCssOrBasePartMap(mode) {\n    const prefix = mode === 'basePart' ? '' : 'toggle-button--';\n    return classnames('toggle-button', this.size && `${prefix}${this.size}`, this.background &&\n      `${prefix}${this.background === 'grey' ? 'primary' : 'secondary'}`, !this.iconOnly &&\n      this.iconPosition &&\n      `toggle-button--icon-${this.iconPosition}`, this.iconOnly && `${prefix}icon-only`, !this.disabled && this.selected && `${prefix}selected`, this.radius && `${prefix}${this.radius}`, this.colorScheme && `${prefix}${this.colorScheme}`, this.variant && `${prefix}${this.variant}`, !this.hideBorder && `${prefix}border`);\n  }\n  get hostElement() { return getElement(this); }\n};\nToggleButton.style = toggleButtonCss;\n\nexport { ToggleButton as scale_toggle_button };\n"],
  "mappings": "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",
  "names": ["iconSizes"]
}
