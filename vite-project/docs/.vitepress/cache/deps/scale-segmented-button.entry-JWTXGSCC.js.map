{
  "version": 3,
  "sources": ["../../../../node_modules/@telekom/scale-components/dist/esm/scale-segmented-button.entry.js"],
  "sourcesContent": ["import { r as registerInstance, c as createEvent, h, a as Host, g as getElement } from './index-6d95a4bc.js';\nimport { c as classnames } from './index-713f92a5.js';\nimport { e as emitEvent } from './utils-c4af5b47.js';\n\nconst segmentedButtonCss = \":host{--background-color:var(--telekom-color-ui-faint);--radius:var(--telekom-radius-standard);--height:32px;--height-medium:40px;--height-large:44px;display:flex;flex-direction:column}.segmented-button{background-color:var(--background-color);border:0;border-radius:var(--radius);padding:0 var(--telekom-spacing-composition-space-02);width:fit-content;height:var(--height);display:inline-grid}.segmented-button--full-width{width:100%}.segmented-button--medium{height:var(--height-medium);padding:0 var(--telekom-spacing-composition-space-02)}.segmented-button--large{height:var(--height-large);padding:0 var(--telekom-spacing-composition-space-02)}.segmented-button--label{font-size:var(--telekom-typography-font-size-body);font-weight:var(--telekom-typography-font-weight-bold);margin-bottom:var(--telekom-spacing-composition-space-04)}.segmented-button--helper-text{margin-top:var(--telekom-spacing-composition-space-04)}\";\n\nconst CHECKMARK_WIDTH_SMALL = 14;\nconst CHECKMARK_WIDTH_MEDIUM = 18 + 12;\nconst CHECKMARK_WIDTH_LARGE = 20 + 18;\nconst SegmentedButton = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n    this.scaleChange = createEvent(this, \"scale-change\", 7);\n    this.scaleChangeLegacy = createEvent(this, \"scaleChange\", 7);\n    /** segment position within button */\n    this.position = 0;\n    this.slottedSegments = 0;\n    /** state */\n    this.status = [];\n    /** (optional) The size of the button */\n    this.size = 'small';\n    /** (optional) Allow more than one button to be selected */\n    this.multiSelect = false;\n    /** (optional) If `true`, the button is disabled */\n    this.disabled = false;\n    /** (optional) If `true`, expand to container width */\n    this.fullWidth = false;\n    /** (optional) If `true`, show error message */\n    this.invalid = false;\n    /** (optional) If `true`, show error message */\n    this.helperText = 'Please select an option';\n    /** (optional) aria-label attribute needed for icon-only buttons */\n    this.ariaLabelTranslation = `segment button with $slottedSegments`;\n    this.showHelperText = false;\n    this.getAdjacentSiblings = (tempState, i) => {\n      let adjacentSiblings = '';\n      if (i !== 0 && tempState[i].selected && tempState[i - 1].selected) {\n        adjacentSiblings = 'left';\n      }\n      if (i !== tempState.length - 1 &&\n        tempState[i].selected &&\n        tempState[i + 1].selected) {\n        adjacentSiblings = `${adjacentSiblings ? adjacentSiblings + ' right' : 'right'}`;\n      }\n      return adjacentSiblings;\n    };\n  }\n  scaleClickHandler(ev) {\n    let tempState;\n    if (!this.multiSelect) {\n      if (!ev.detail.selected) {\n        tempState = this.status.map((obj) => ev.detail.id === obj.id ? ev.detail : Object.assign({}, obj));\n        /* clicked button has now selected state */\n      }\n      else {\n        tempState = this.status.map((obj) => ev.detail.id === obj.id ? ev.detail : Object.assign(Object.assign({}, obj), { selected: false }));\n      }\n    }\n    else {\n      tempState = this.status.map((obj) => ev.detail.id === obj.id ? ev.detail : Object.assign({}, obj));\n    }\n    this.setState(tempState);\n  }\n  handlePropsChange() {\n    this.propagatePropsToChildren();\n  }\n  /**\n   * Keep props, needed in children buttons, in sync\n   */\n  propagatePropsToChildren() {\n    this.getAllSegments().forEach((segment) => {\n      segment.setAttribute('size', this.size);\n      segment.setAttribute('selected-index', this.selectedIndex.toString());\n      if (this.disabled) {\n        segment.setAttribute('disabled', 'disabled');\n      }\n    });\n  }\n  componentDidLoad() {\n    const tempState = [];\n    const segments = this.getAllSegments();\n    this.slottedSegments = segments.length;\n    const longestButtonWidth = this.getLongestButtonWidth();\n    segments.forEach((segment) => {\n      this.position++;\n      tempState.push({\n        id: segment.getAttribute('segment-id') || segment.segmentId,\n        selected: segment.hasAttribute('selected') || segment.selected,\n      });\n      segment.setAttribute('position', this.position.toString());\n      segment.setAttribute('aria-description-translation', '$position $selected');\n    });\n    if (!this.fullWidth) {\n      this.container.style.gridTemplateColumns = `repeat(${this.hostElement.children.length}, ${Math.ceil(longestButtonWidth)}px)`;\n    }\n    else {\n      this.container.style.display = 'flex';\n    }\n    this.selectedIndex = this.getSelectedIndex();\n    this.propagatePropsToChildren();\n    this.position = 0;\n    this.status = tempState;\n    this.setState(tempState);\n  }\n  componentWillUpdate() {\n    this.selectedIndex = this.getSelectedIndex();\n    this.showHelperText = false;\n    if (this.invalid &&\n      this.status.filter((e) => e.selected === true).length <= 0) {\n      this.showHelperText = true;\n    }\n  }\n  getSelectedIndex() {\n    if (this.multiSelect) {\n      // in multi-select having no selected segments is allowed\n      return -1;\n    }\n    else {\n      const allSegments = this.getAllSegments();\n      const selectedIndex = allSegments.findIndex((el) => el.selected === true);\n      return selectedIndex;\n    }\n  }\n  // all segmented buttons should have the same width, based on the largest one\n  getLongestButtonWidth() {\n    let tempWidth = 0;\n    Array.from(this.hostElement.children).forEach((child) => {\n      const selected = child.hasAttribute('selected');\n      const iconOnly = child.hasAttribute('icon-only');\n      const checkmark = this.size === 'small'\n        ? CHECKMARK_WIDTH_SMALL\n        : this.size === 'medium'\n          ? CHECKMARK_WIDTH_MEDIUM\n          : CHECKMARK_WIDTH_LARGE;\n      if (selected || iconOnly) {\n        tempWidth =\n          child.getBoundingClientRect().width > tempWidth\n            ? child.getBoundingClientRect().width\n            : tempWidth;\n      }\n      else {\n        tempWidth =\n          child.getBoundingClientRect().width + checkmark > tempWidth\n            ? child.getBoundingClientRect().width + checkmark\n            : tempWidth;\n      }\n    });\n    return tempWidth;\n  }\n  setState(tempState) {\n    const segments = Array.from(this.hostElement.querySelectorAll('scale-segment'));\n    segments.forEach((segment, i) => {\n      segment.setAttribute('adjacent-siblings', this.getAdjacentSiblings(tempState, i));\n      segment.setAttribute('selected', tempState[i].selected ? 'true' : 'false');\n    });\n    this.status = tempState;\n    emitEvent(this, 'scaleChange', this.status);\n  }\n  getAllSegments() {\n    return Array.from(this.hostElement.querySelectorAll('scale-segment'));\n  }\n  getAriaLabelTranslation() {\n    const filledText = this.ariaLabelTranslation.replace(/\\$slottedSegments/g, `${this.slottedSegments}`);\n    return filledText;\n  }\n  render() {\n    return (h(Host, null, this.styles && h(\"style\", null, this.styles), this.label && (h(\"span\", { class: \"segmented-button--label\" }, \" \", this.label, \" \")), h(\"div\", { class: this.getCssClassMap(), part: this.getBasePartMap(), \"aria-label\": this.getAriaLabelTranslation(), role: \"group\", ref: (el) => (this.container = el) }, h(\"slot\", null)), this.showHelperText && (h(\"scale-helper-text\", { class: \"segmented-button--helper-text\", helperText: this.helperText, variant: 'danger' }))));\n  }\n  getBasePartMap() {\n    return this.getCssOrBasePartMap('basePart');\n  }\n  getCssClassMap() {\n    return this.getCssOrBasePartMap('css');\n  }\n  getCssOrBasePartMap(mode) {\n    const prefix = mode === 'basePart' ? '' : 'segmented-button--';\n    return classnames('segmented-button', this.size && `${prefix}${this.size}`, this.fullWidth && `${prefix}full-width`);\n  }\n  get hostElement() { return getElement(this); }\n  static get watchers() { return {\n    \"disabled\": [\"handlePropsChange\"],\n    \"size\": [\"handlePropsChange\"],\n    \"selectedIndex\": [\"handlePropsChange\"]\n  }; }\n};\nSegmentedButton.style = segmentedButtonCss;\n\nexport { SegmentedButton as scale_segmented_button };\n"],
  "mappings": "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",
  "names": []
}
