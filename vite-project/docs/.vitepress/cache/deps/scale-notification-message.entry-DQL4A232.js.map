{
  "version": 3,
  "sources": ["../../../../node_modules/@telekom/scale-components/dist/esm/scale-notification-message.entry.js"],
  "sourcesContent": ["import { r as registerInstance, c as createEvent, h, a as Host, g as getElement } from './index-6d95a4bc.js';\nimport { c as classnames } from './index-713f92a5.js';\nimport { s as statusNote } from './status-note-0089e9c9.js';\nimport { e as emitEvent } from './utils-c4af5b47.js';\n\nconst notificationMessageCss = \":host{--width:100%;--radius:var(--telekom-radius-standard);--border:var(--telekom-line-weight-standard) solid transparent;--background-error:var(--telekom-color-functional-danger-subtle);--background-warning:var(--telekom-color-functional-warning-subtle);--background-informational:var(\\n    --telekom-color-functional-informational-subtle\\n  );--background-success:var(--telekom-color-functional-success-subtle)}.notification-message{border:var(--border);border-radius:var(--radius);width:var(--width);position:relative}.notification-message--variant-error{background:var(--background-error)}.notification-message--variant-warning{background-color:var(--background-warning)}.notification-message--variant-informational{background-color:var(--background-informational)}.notification-message--variant-success{background-color:var(--background-success)}.notification-message__heading{margin:14px 48px 14px 48px;font-weight:var(--telekom-typography-font-weight-bold);line-height:var(--telekom-typography-line-spacing-standard)}.notification-message__text{margin:8px 48px 15px 48px}::slotted(*){font-weight:var(--telekom-typography-font-weight-regular)}.notification-message__icon-close{position:absolute;top:8px;right:13.5px;border:none;cursor:pointer;margin:0;padding:0;background:transparent;color:var(--telekom-color-text-and-icon-standard)}.notification-message__icon-close svg{height:19px;width:19px;padding:6.5px;border-radius:20%}.notification-message__icon-close:hover svg{background-color:hsl(0, 0%, 100%);color:var(--telekom-color-text-and-icon-primary-hovered)}.notification-message__icon-success{position:absolute;top:12.5px;left:17px;height:20px;width:20px;color:var(--telekom-color-text-and-icon-functional-success)}.notification-message__icon-error{position:absolute;top:12px;left:17px;height:20px;width:20px;color:var(--telekom-color-text-and-icon-functional-danger)}.notification-message__icon-information{position:absolute;top:12px;left:17px;height:20px;width:20px;color:var(--telekom-color-text-and-icon-functional-informational)}@media screen and (forced-colors: active), (-ms-high-contrast: active){.notification-message__icon-close{color:hsl(0, 0%, 100%)}.notification-message{border:1px solid hsl(0, 0%, 100%)}}\";\n\nconst NotificationMessage = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n    this.scaleClose = createEvent(this, \"scale-close\", 7);\n    this.variant = 'informational';\n    this.dismissible = false;\n    this.autoHide = false;\n    this.autoHideDuration = 3000;\n    /** (optional) Label for close button */\n    this.closeButtonLabel = 'close';\n    /** (optional) Title for close button */\n    this.closeButtonTitle = 'close';\n    this.close = () => {\n      this.opened = false;\n      emitEvent(this, 'scaleClose');\n    };\n  }\n  componentWillLoad() {\n    this.hasSlotText = !!this.hostElement.querySelector('[slot=text]');\n  }\n  componentDidRender() {\n    if (this.autoHide === true) {\n      setTimeout(this.close, this.autoHideDuration);\n    }\n  }\n  componentDidUpdate() {\n    this.hasSlotText = !!this.hostElement.querySelector('[slot=text]');\n  }\n  connectedCallback() {\n    statusNote({ source: this.hostElement, type: 'warn' });\n  }\n  async open() {\n    this.opened = true;\n  }\n  handleIcons() {\n    if (this.variant) {\n      switch (this.variant) {\n        case 'success':\n          return (h(\"scale-icon-action-success\", { class: \"notification-message__icon-success\", color: \"#187431\", \"aria-hidden\": \"true\" }));\n        case 'informational':\n          return (h(\"scale-icon-alert-information\", { class: \"notification-message__icon-information\", \"aria-hidden\": \"true\" }));\n        case 'error':\n          return (h(\"scale-icon-alert-error\", { class: \"notification-message__icon-error\", \"aria-hidden\": \"true\" }));\n        case 'warning':\n          return (h(\"scale-icon-alert-warning\", { class: \"notification-message__icon-information\", color: \"#AE461C\", \"aria-hidden\": \"true\" }));\n      }\n    }\n    return;\n  }\n  render() {\n    if (!this.opened) {\n      return null;\n    }\n    return (h(Host, null, h(\"div\", { role: \"alert\", style: { display: `${this.opened ? '' : 'none'}` }, part: this.getBasePartMap(), class: this.getCssClassMap(), tabindex: \"0\" }, h(\"div\", { part: \"container\", class: \"notification-message__container\" }, this.handleIcons(), h(\"div\", { part: \"heading\", class: \"notification-message__heading\" }, h(\"slot\", null, \"\\u2003\"), this.dismissible && (h(\"button\", { part: \"button-dismissable\", type: \"button\", class: \"notification-message__icon-close\", onClick: () => this.close(), tabindex: 0, \"aria-label\": this.closeButtonLabel, title: this.closeButtonTitle, onKeyDown: (e) => {\n        if (e.key === 'Enter') {\n          this.close();\n        }\n      } }, h(\"scale-icon-action-circle-close\", null)))), this.hasSlotText && (h(\"div\", { part: \"text\", class: \"notification-message__text\" }, h(\"slot\", { name: \"text\" })))))));\n  }\n  getBasePartMap() {\n    return this.getCssOrBasePartMap('basePart');\n  }\n  getCssClassMap() {\n    return this.getCssOrBasePartMap('css');\n  }\n  getCssOrBasePartMap(mode) {\n    const name = 'notification-message';\n    const prefix = mode === 'basePart' ? '' : `${name}--`;\n    return classnames(name, this.variant && `${prefix}variant-${this.variant}`);\n  }\n  get hostElement() { return getElement(this); }\n};\nNotificationMessage.style = notificationMessageCss;\n\nexport { NotificationMessage as scale_notification_message };\n"],
  "mappings": "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",
  "names": []
}
