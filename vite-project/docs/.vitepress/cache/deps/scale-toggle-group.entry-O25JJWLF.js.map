{
  "version": 3,
  "sources": ["../../../../node_modules/@telekom/scale-components/dist/esm/scale-toggle-group.entry.js"],
  "sourcesContent": ["import { r as registerInstance, c as createEvent, h, a as Host, g as getElement } from './index-6d95a4bc.js';\nimport { c as classnames } from './index-713f92a5.js';\nimport { e as emitEvent } from './utils-c4af5b47.js';\nimport { s as statusNote } from './status-note-0089e9c9.js';\n\nconst toggleGroupCss = \":host{--border-color:var(--telekom-color-ui-border-standard);--border-color-disabled:var(--telekom-color-ui-border-disabled);--border:var(--telekom-spacing-composition-space-01) solid\\n    var(--border-color);--border-disabled:var(--telekom-spacing-composition-space-01) solid\\n    var(--border-color-disabled);--radius:var(--telekom-radius-standard)}.toggle-group--inline{display:inline-flex}.toggle-group--block{display:flex}.toggle-group--block ::slotted(*){flex-grow:1}\";\n\nconst ToggleGroup = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n    this.scaleChange = createEvent(this, \"scale-change\", 7);\n    this.scaleChangeLegacy = createEvent(this, \"scaleChange\", 7);\n    /** toggle button position within group */\n    this.position = 0;\n    /** number of slotted toggle-buttons */\n    this.slottedButtons = 0;\n    /** state */\n    this.status = [];\n    /** (optional) The size of the button */\n    this.size = 'regular';\n    /** (optional) Button Group background */\n    this.background = 'white';\n    /** (optional) 100% width */\n    this.fullWidth = false;\n    /** (optional) If `true`, the button is disabled */\n    this.disabled = false;\n    /** (optional) If `true`, the group has a border */\n    this.hideBorder = false;\n    /** (optional) more than one button selected possible */\n    this.singleSelect = false;\n    /** (optional) aria-label attribute needed for icon-only buttons */\n    this.ariaLabelTranslation = `toggle button group with $slottedButtons buttons`;\n    /** @deprecated - variant should replace colorScheme */\n    this.colorScheme = 'color';\n    /** (optional) background variant of a selected toggle-button */\n    this.variant = 'color';\n  }\n  scaleClickHandler(ev) {\n    let tempState;\n    if (this.singleSelect) {\n      if (!ev.detail.selected) {\n        tempState = this.status.map((obj) => ev.detail.id === obj.id ? ev.detail : Object.assign({}, obj));\n        /* clicked button has now selected state */\n      }\n      else {\n        tempState = this.status.map((obj) => ev.detail.id === obj.id ? ev.detail : Object.assign(Object.assign({}, obj), { selected: false }));\n      }\n    }\n    else {\n      tempState = this.status.map((obj) => ev.detail.id === obj.id ? ev.detail : Object.assign({}, obj));\n    }\n    this.setNewState(tempState);\n  }\n  handlePropsChange() {\n    this.propagatePropsToChildren();\n  }\n  componentDidLoad() {\n    const tempState = [];\n    const toggleButtons = this.getAllToggleButtons();\n    this.slottedButtons = toggleButtons.length;\n    toggleButtons.forEach((toggleButton) => {\n      this.position++;\n      tempState.push({\n        id: toggleButton.getAttribute('toggle-button-id'),\n        selected: toggleButton.hasAttribute('selected'),\n      });\n      toggleButton.setAttribute('position', this.position.toString());\n      toggleButton.setAttribute('aria-description-translation', '$position $selected');\n    });\n    this.propagatePropsToChildren();\n    this.position = 0;\n    this.status = tempState;\n  }\n  getAllToggleButtons() {\n    return Array.from(this.hostElement.querySelectorAll('scale-toggle-button'));\n  }\n  /**\n   * Keep props, needed in children buttons, in sync\n   */\n  propagatePropsToChildren() {\n    this.getAllToggleButtons().forEach((el) => {\n      el.setAttribute('size', this.size);\n      el.setAttribute('background', this.background);\n      el.setAttribute('disabled', this.disabled && 'disabled');\n      /** DEPRECATED */\n      // if attribute variant is set it overrides color-scheme\n      el.setAttribute('color-scheme', this.variant !== 'color' ? this.variant : this.colorScheme);\n      // if attribute color-scheme is set it overrides variant\n      el.setAttribute('variant', this.colorScheme !== 'color' ? this.colorScheme : this.variant);\n      el.setAttribute('hide-border', this.hideBorder ? 'true' : 'false');\n    });\n  }\n  getAriaLabelTranslation() {\n    const filledText = this.ariaLabelTranslation.replace(/\\$slottedButtons/g, `${this.slottedButtons}`);\n    return filledText;\n  }\n  componentDidRender() {\n    if (this.fullWidth) {\n      this.setButtonWidth();\n    }\n    this.setChildrenCorners();\n    if (this.colorScheme !== 'color') {\n      statusNote({\n        tag: 'deprecated',\n        message: 'Property \"colorScheme\" is deprecated. Please use the \"variant\" property!',\n        type: 'warn',\n        source: this.hostElement,\n      });\n    }\n  }\n  setNewState(tempState) {\n    const toggleButtons = Array.from(this.hostElement.querySelectorAll('scale-toggle-button'));\n    toggleButtons.forEach((button, i) => {\n      button.setAttribute('selected', tempState[i].selected ? 'true' : 'false');\n    });\n    this.status = tempState;\n    emitEvent(this, 'scaleChange', this.status);\n  }\n  setButtonWidth() {\n    Array.from(this.hostElement.children).forEach((child) => {\n      const button = child.shadowRoot.querySelector('button');\n      button.style.width = '100%';\n    });\n  }\n  setChildrenCorners() {\n    const children = Array.from(this.hostElement.children);\n    if (children.length === 1) {\n      // set four border radius when there is only one child\n      children[0].setAttribute('radius', 'all');\n    }\n    else {\n      for (let i = 0; i < children.length; i++) {\n        if (i === 0) {\n          children[i].setAttribute('radius', 'left');\n        }\n        if (i > 0 && i < children.length - 1) {\n          children[i].setAttribute('radius', 'neither');\n        }\n        if (i === children.length - 1) {\n          children[i].setAttribute('radius', 'right');\n        }\n      }\n    }\n  }\n  render() {\n    return (h(Host, null, this.styles && h(\"style\", null, this.styles), h(\"div\", { class: this.getCssClassMap(), part: this.getBasePartMap(), \"aria-label\": this.getAriaLabelTranslation(), role: \"group\" }, h(\"slot\", null))));\n  }\n  getBasePartMap() {\n    return this.getCssOrBasePartMap('basePart');\n  }\n  getCssClassMap() {\n    return this.getCssOrBasePartMap('css');\n  }\n  getCssOrBasePartMap(mode) {\n    const prefix = mode === 'basePart' ? '' : 'toggle-group--';\n    return classnames('toggle-group', this.fullWidth && `${prefix}block`, !this.fullWidth && `${prefix}inline`, this.disabled && `${prefix}disabled`);\n  }\n  get hostElement() { return getElement(this); }\n  static get watchers() { return {\n    \"background\": [\"handlePropsChange\"],\n    \"disabled\": [\"handlePropsChange\"],\n    \"hideBorder\": [\"handlePropsChange\"],\n    \"size\": [\"handlePropsChange\"],\n    \"variant\": [\"handlePropsChange\"]\n  }; }\n};\nToggleGroup.style = toggleGroupCss;\n\nexport { ToggleGroup as scale_toggle_group };\n"],
  "mappings": "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",
  "names": []
}
