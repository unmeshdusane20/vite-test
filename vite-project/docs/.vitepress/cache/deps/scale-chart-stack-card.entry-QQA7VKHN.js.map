{
  "version": 3,
  "sources": ["../../../../node_modules/@telekom/scale-components/dist/esm/scale-chart-stack-card.entry.js"],
  "sourcesContent": ["import { r as registerInstance, h, a as Host, g as getElement } from './index-6d95a4bc.js';\nimport { c as classnames } from './index-713f92a5.js';\nimport { s as statusNote } from './status-note-0089e9c9.js';\n\nconst chartStackCardCss = \":host{--scl-chart-stack-card-color:var(--telekom-color-additional-blue-600)}.chart-stack-card{color:var(--color-text);--scl-chart-stack-card-color:var(--telekom-color-additional-blue-600)}.chart-stack-card .header{height:var(--telekom-spacing-composition-space-08);font-size:var(--telekom-typography-font-size-headline-3);font-weight:var(--telekom-typography-font-weight-extra-bold);line-height:var(--telekom-typography-line-spacing-tight);margin-bottom:var(--telekom-spacing-composition-space-08)}.chart-stack-card .bar{display:flex;justify-content:space-between;margin-bottom:var(--telekom-spacing-composition-space-06)}.chart-stack-card .bar__item{background-color:var(--scl-chart-stack-card-color);height:var(--telekom-spacing-composition-space-10);flex:1}.chart-stack-card .bar__item:first-of-type{border-top-left-radius:var(--telekom-radius-small);border-bottom-left-radius:var(--telekom-radius-small)}.chart-stack-card .bar__item:last-of-type{border-top-right-radius:var(--telekom-radius-small);border-bottom-right-radius:var(--telekom-radius-small)}.chart-stack-card .legend{display:flex;flex-direction:column;height:calc(var(--telekom-spacing-composition-space-06) * 10)}.chart-stack-card .spacer{padding:0 var(--telekom-spacing-composition-space-04)}.chart-stack-card .legend .legend__row__item{display:flex;line-height:var(--telekom-typography-line-spacing-standard)}.chart-stack-card .legend .legend__row{display:flex;justify-content:space-between}.chart-stack-card .legend .legend__row:last-child{padding-bottom:var(--telekom-spacing-composition-space-10)}.chart-stack-card .legend .legend__item{height:10px;width:10px;background-color:var(--scl-chart-stack-card-color);border-radius:100%;align-self:center;margin-right:var(--telekom-spacing-composition-space-03)}.chart-stack-card .legend .legend__label{font-weight:var(--type-weight-bold);font-size:var(--telekom-spacing-composition-space-06);line-height:200%}\";\n\nconst ChartStackCard = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n    this.readData = (data) => {\n      try {\n        return Array.isArray(JSON.parse(data)) ? JSON.parse(data) : [];\n      }\n      catch (error) {\n        return Array.isArray(data) ? data : [];\n      }\n    };\n  }\n  getOpacity(item, index) {\n    return JSON.stringify(index === 0 ? 1 : +item.percentage / 100);\n  }\n  getCardStyle() {\n    return `\n      .card:after {\n          content: '';\n          display: block;\n          background: linear-gradient(0deg, white, rgba(255,255,255, 0));\n          height: 2rem;\n          margin-top: -2rem;\n          position: relative;\n        }\n\n      .card__body: {\n        padding-bottom: 0 !important;\n      }\n  `;\n  }\n  connectedCallback() {\n    statusNote({ source: this.hostElement, type: 'warn' });\n  }\n  render() {\n    return (h(Host, null, h(\"div\", { class: this.getCssClassMap() }, h(\"scale-card\", { styles: this.getCardStyle() }, h(\"div\", { class: \"header\" }, this.heading), h(\"div\", { class: \"bar\" }, this.readData(this.data)\n      .sort((a, b) => b.percentage - a.percentage)\n      .map((item, index) => {\n      if (+item.percentage > 0) {\n        return (h(\"div\", { class: \"bar__item\", style: {\n            opacity: this.getOpacity(item, index),\n            flex: JSON.stringify(+item.percentage),\n          } }));\n      }\n    })), h(\"div\", { class: \"legend\" }, this.readData(this.data)\n      .sort((a, b) => b.percentage - a.percentage)\n      .map((item, index) => (h(\"div\", { class: \"legend__row\" }, h(\"div\", { class: \"legend__row__item\" }, h(\"div\", { class: \"legend__item\", style: {\n        opacity: this.getOpacity(item, index),\n      } }), h(\"div\", { class: \"legend__label spacer\" }, item.type)), h(\"div\", { class: \"legend__row__item\" }, h(\"div\", { class: \"spacer\" }, item.value), h(\"div\", { class: \"spacer\" }, item.percentage, \"%\"))))))))));\n  }\n  getCssClassMap() {\n    return classnames('chart-stack-card');\n  }\n  get hostElement() { return getElement(this); }\n};\nChartStackCard.style = chartStackCardCss;\n\nexport { ChartStackCard as scale_chart_stack_card };\n"],
  "mappings": ";;;;;;;;;;;;;;AAIA,IAAM,oBAAoB;AAE1B,IAAM,iBAAiB,MAAM;AAAA,EAC3B,YAAY,SAAS;AACnB,qBAAiB,MAAM,OAAO;AAC9B,SAAK,WAAW,CAAC,SAAS;AACxB,UAAI;AACF,eAAO,MAAM,QAAQ,KAAK,MAAM,IAAI,CAAC,IAAI,KAAK,MAAM,IAAI,IAAI,CAAC;AAAA,MAC/D,SACO,OAAO;AACZ,eAAO,MAAM,QAAQ,IAAI,IAAI,OAAO,CAAC;AAAA,MACvC;AAAA,IACF;AAAA,EACF;AAAA,EACA,WAAW,MAAM,OAAO;AACtB,WAAO,KAAK,UAAU,UAAU,IAAI,IAAI,CAAC,KAAK,aAAa,GAAG;AAAA,EAChE;AAAA,EACA,eAAe;AACb,WAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAcT;AAAA,EACA,oBAAoB;AAClB,eAAW,EAAE,QAAQ,KAAK,aAAa,MAAM,OAAO,CAAC;AAAA,EACvD;AAAA,EACA,SAAS;AACP,WAAQ,EAAE,MAAM,MAAM,EAAE,OAAO,EAAE,OAAO,KAAK,eAAe,EAAE,GAAG,EAAE,cAAc,EAAE,QAAQ,KAAK,aAAa,EAAE,GAAG,EAAE,OAAO,EAAE,OAAO,SAAS,GAAG,KAAK,OAAO,GAAG,EAAE,OAAO,EAAE,OAAO,MAAM,GAAG,KAAK,SAAS,KAAK,IAAI,EAC9M,KAAK,CAAC,GAAG,MAAM,EAAE,aAAa,EAAE,UAAU,EAC1C,IAAI,CAAC,MAAM,UAAU;AACtB,UAAI,CAAC,KAAK,aAAa,GAAG;AACxB,eAAQ,EAAE,OAAO,EAAE,OAAO,aAAa,OAAO;AAAA,UAC1C,SAAS,KAAK,WAAW,MAAM,KAAK;AAAA,UACpC,MAAM,KAAK,UAAU,CAAC,KAAK,UAAU;AAAA,QACvC,EAAE,CAAC;AAAA,MACP;AAAA,IACF,CAAC,CAAC,GAAG,EAAE,OAAO,EAAE,OAAO,SAAS,GAAG,KAAK,SAAS,KAAK,IAAI,EACvD,KAAK,CAAC,GAAG,MAAM,EAAE,aAAa,EAAE,UAAU,EAC1C,IAAI,CAAC,MAAM,UAAW,EAAE,OAAO,EAAE,OAAO,cAAc,GAAG,EAAE,OAAO,EAAE,OAAO,oBAAoB,GAAG,EAAE,OAAO,EAAE,OAAO,gBAAgB,OAAO;AAAA,MAC1I,SAAS,KAAK,WAAW,MAAM,KAAK;AAAA,IACtC,EAAE,CAAC,GAAG,EAAE,OAAO,EAAE,OAAO,uBAAuB,GAAG,KAAK,IAAI,CAAC,GAAG,EAAE,OAAO,EAAE,OAAO,oBAAoB,GAAG,EAAE,OAAO,EAAE,OAAO,SAAS,GAAG,KAAK,KAAK,GAAG,EAAE,OAAO,EAAE,OAAO,SAAS,GAAG,KAAK,YAAY,GAAG,CAAC,CAAC,CAAE,CAAC,CAAC,CAAC,CAAC;AAAA,EACjN;AAAA,EACA,iBAAiB;AACf,WAAO,WAAW,kBAAkB;AAAA,EACtC;AAAA,EACA,IAAI,cAAc;AAAE,WAAO,WAAW,IAAI;AAAA,EAAG;AAC/C;AACA,eAAe,QAAQ;",
  "names": []
}
